# Here we put all our configuration values
# we can define profile-specific values using `%<profile>.` prefix
# e.g. %dev.quarkus.log.level=DEBUG would only be applied in dev mode

# drop and create the database at startup (other values: `validate`, `update`, `none`)
# dont deploy this to any env you care about ;)
quarkus.hibernate-orm.database.generation=drop-and-create
# to print sql produced by hibernate, disable in prod
quarkus.hibernate-orm.log.sql=true

# which packages should be automatically logged by tkit cdi logger
quarkus.tkit.log.packages=org.tkit,com.devonfw

#you can supress logs from classes by annotations or regex
quarkus.tkit.log.ignore.pattern=.*MapperImpl


#identifier of your service, if empty a no-op tracer will be used
quarkus.jaeger.service-name=demo-app
#sampling algorithm, const=tracing all or nothing
quarkus.jaeger.sampler-type=const
#1=trace every single method
quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
#report spans to central aggregator(you must start Jaeger yourself - e.g. using the docker-compose.yaml)
quarkus.jaeger.endpoint=http://localhost:14268/api/traces

#all of these are default values, metrics would work just fine if you remove it
quarkus.micrometer.binder-enabled-default=true
#also report metrics from microprofile
quarkus.micrometer.binder.mp-metrics.enabled=true
#implicit metrics from http client
quarkus.micrometer.binder.http-client.enabled=true
#implicit metrics from REST endpoints
quarkus.micrometer.binder.http-server.enabled=true


# DEV profile
# disable json logs for better readability
%dev.quarkus.tkit.log.console.json=false
#if you dont use tkit-json=log but standard quarkus-json-log, use this instead
#%dev.quarkus.log.console.json=false


# TEST
%test.quarkus.tkit.log.console.json=false

quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/demo
quarkus.datasource.credentials-provider=custom
