apiVersion: apps/v1
kind: Deployment
# deployment v1
metadata:
  # metadata labels - tags under which this resources can be found in k8s api
  labels:
    app: demo-quarkus
    app.kubernetes.io/name: demo-quarkus
  name: demo-quarkus
  namespace: default
spec:
  # scale to 2 instances
  replicas: 2
  selector:
    #how are the pods linked together
    matchLabels:
      app: demo-quarkus
  template:
    metadata:
      labels:
        app: demo-quarkus
    spec:
      # pod spec, we want a single container in our pods
      containers:
        - name: demo-quarkus
          # where should the image come from
          image: 'k3d-registry:5000/demo-quarkus:latest'
          # always perform pull when creating pod
          imagePullPolicy: Always
          # env vars so we can connect to DB
          env:
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: jdbc:postgresql://postgresql:5432/demo
            - name: QUARKUS_DATASOURCE_USERNAME
              value: demo
            - name: QUARKUS_DATASOURCE_PASSWORD
              value: demo
            - name: MP_JWT_VERIFY_ISSUER
              value: "http://keycloak-demo-quarkus.localhost/auth/realms/demo-quarkus"  
            - name: MP_JWT_VERIFY_PUBLICKEY_LOCATION
              value: "http://keycloak.default:8080/auth/realms/demo-quarkus/protocol/openid-connect/certs"
            - name: QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION
              value: drop-and-create
          # live & ready probes, using our healthcheck endpoints
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - containerPort: 8080
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
      # we can define init containers, single run jobs that run before our main container does
      # we use them to init database and check that its ready
      initContainers:
        - command:
            - /bin/bash
            - '-c'
            - >-
              psql -tc "SELECT 1 FROM pg_database WHERE datname =
              'demo'" | grep -q 1 | psql -c "CREATE USER
              demo WITH ENCRYPTED PASSWORD 'demo';" -c
              "CREATE DATABASE demo;" -c "GRANT ALL PRIVILEGES
              ON DATABASE demo TO demo;"
          env:
            - name: PGHOST
              value: postgresql
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: null
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              value: postgres
            - name: DISABLE_WELCOME_MESSAGE
              value: 'true'
          image: 'docker.io/bitnami/postgresql:12.2.0'
          name: create-db
        - command:
            - /bin/bash
            - '-c'
            - until pg_isready; do echo waiting for database; sleep 2; done;
          env:
            - name: PGHOST
              value: postgresql
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: demo
            - name: PGUSER
              value: demo
            - name: PGPASSWORD
              value: demo
            - name: DISABLE_WELCOME_MESSAGE
              value: 'true'
          image: 'docker.io/bitnami/postgresql:12.2.0'
          name: check-db
